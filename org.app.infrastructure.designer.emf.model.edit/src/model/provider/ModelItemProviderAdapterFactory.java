/**
 */
package model.provider;

import java.util.ArrayList;
import java.util.Collection;

import model.util.ModelAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ModelItemProviderAdapterFactory extends ModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link model.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Metadata} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetadataItemProvider metadataItemProvider;

	/**
	 * This creates an adapter for a {@link model.Metadata}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetadataAdapter() {
		if (metadataItemProvider == null) {
			metadataItemProvider = new MetadataItemProvider(this);
		}

		return metadataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.ArchimateModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArchimateModelItemProvider archimateModelItemProvider;

	/**
	 * This creates an adapter for a {@link model.ArchimateModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArchimateModelAdapter() {
		if (archimateModelItemProvider == null) {
			archimateModelItemProvider = new ArchimateModelItemProvider(this);
		}

		return archimateModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Folder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FolderItemProvider folderItemProvider;

	/**
	 * This creates an adapter for a {@link model.Folder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFolderAdapter() {
		if (folderItemProvider == null) {
			folderItemProvider = new FolderItemProvider(this);
		}

		return folderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Junction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JunctionItemProvider junctionItemProvider;

	/**
	 * This creates an adapter for a {@link model.Junction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJunctionAdapter() {
		if (junctionItemProvider == null) {
			junctionItemProvider = new JunctionItemProvider(this);
		}

		return junctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.AndJunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AndJunctionItemProvider andJunctionItemProvider;

	/**
	 * This creates an adapter for a {@link model.AndJunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAndJunctionAdapter() {
		if (andJunctionItemProvider == null) {
			andJunctionItemProvider = new AndJunctionItemProvider(this);
		}

		return andJunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.OrJunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrJunctionItemProvider orJunctionItemProvider;

	/**
	 * This creates an adapter for a {@link model.OrJunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrJunctionAdapter() {
		if (orJunctionItemProvider == null) {
			orJunctionItemProvider = new OrJunctionItemProvider(this);
		}

		return orJunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.BusinessActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessActivityItemProvider businessActivityItemProvider;

	/**
	 * This creates an adapter for a {@link model.BusinessActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessActivityAdapter() {
		if (businessActivityItemProvider == null) {
			businessActivityItemProvider = new BusinessActivityItemProvider(this);
		}

		return businessActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.BusinessActor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessActorItemProvider businessActorItemProvider;

	/**
	 * This creates an adapter for a {@link model.BusinessActor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessActorAdapter() {
		if (businessActorItemProvider == null) {
			businessActorItemProvider = new BusinessActorItemProvider(this);
		}

		return businessActorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.BusinessCollaboration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessCollaborationItemProvider businessCollaborationItemProvider;

	/**
	 * This creates an adapter for a {@link model.BusinessCollaboration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessCollaborationAdapter() {
		if (businessCollaborationItemProvider == null) {
			businessCollaborationItemProvider = new BusinessCollaborationItemProvider(this);
		}

		return businessCollaborationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Contract} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContractItemProvider contractItemProvider;

	/**
	 * This creates an adapter for a {@link model.Contract}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContractAdapter() {
		if (contractItemProvider == null) {
			contractItemProvider = new ContractItemProvider(this);
		}

		return contractItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.BusinessEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessEventItemProvider businessEventItemProvider;

	/**
	 * This creates an adapter for a {@link model.BusinessEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessEventAdapter() {
		if (businessEventItemProvider == null) {
			businessEventItemProvider = new BusinessEventItemProvider(this);
		}

		return businessEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.BusinessFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessFunctionItemProvider businessFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link model.BusinessFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessFunctionAdapter() {
		if (businessFunctionItemProvider == null) {
			businessFunctionItemProvider = new BusinessFunctionItemProvider(this);
		}

		return businessFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.BusinessInteraction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessInteractionItemProvider businessInteractionItemProvider;

	/**
	 * This creates an adapter for a {@link model.BusinessInteraction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessInteractionAdapter() {
		if (businessInteractionItemProvider == null) {
			businessInteractionItemProvider = new BusinessInteractionItemProvider(this);
		}

		return businessInteractionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.BusinessInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessInterfaceItemProvider businessInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link model.BusinessInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessInterfaceAdapter() {
		if (businessInterfaceItemProvider == null) {
			businessInterfaceItemProvider = new BusinessInterfaceItemProvider(this);
		}

		return businessInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Meaning} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeaningItemProvider meaningItemProvider;

	/**
	 * This creates an adapter for a {@link model.Meaning}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeaningAdapter() {
		if (meaningItemProvider == null) {
			meaningItemProvider = new MeaningItemProvider(this);
		}

		return meaningItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.BusinessObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessObjectItemProvider businessObjectItemProvider;

	/**
	 * This creates an adapter for a {@link model.BusinessObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessObjectAdapter() {
		if (businessObjectItemProvider == null) {
			businessObjectItemProvider = new BusinessObjectItemProvider(this);
		}

		return businessObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.BusinessProcess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessProcessItemProvider businessProcessItemProvider;

	/**
	 * This creates an adapter for a {@link model.BusinessProcess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessProcessAdapter() {
		if (businessProcessItemProvider == null) {
			businessProcessItemProvider = new BusinessProcessItemProvider(this);
		}

		return businessProcessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Product} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductItemProvider productItemProvider;

	/**
	 * This creates an adapter for a {@link model.Product}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductAdapter() {
		if (productItemProvider == null) {
			productItemProvider = new ProductItemProvider(this);
		}

		return productItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Representation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepresentationItemProvider representationItemProvider;

	/**
	 * This creates an adapter for a {@link model.Representation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepresentationAdapter() {
		if (representationItemProvider == null) {
			representationItemProvider = new RepresentationItemProvider(this);
		}

		return representationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.BusinessRole} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessRoleItemProvider businessRoleItemProvider;

	/**
	 * This creates an adapter for a {@link model.BusinessRole}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessRoleAdapter() {
		if (businessRoleItemProvider == null) {
			businessRoleItemProvider = new BusinessRoleItemProvider(this);
		}

		return businessRoleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.BusinessService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessServiceItemProvider businessServiceItemProvider;

	/**
	 * This creates an adapter for a {@link model.BusinessService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessServiceAdapter() {
		if (businessServiceItemProvider == null) {
			businessServiceItemProvider = new BusinessServiceItemProvider(this);
		}

		return businessServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Value} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueItemProvider valueItemProvider;

	/**
	 * This creates an adapter for a {@link model.Value}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueAdapter() {
		if (valueItemProvider == null) {
			valueItemProvider = new ValueItemProvider(this);
		}

		return valueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Location} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocationItemProvider locationItemProvider;

	/**
	 * This creates an adapter for a {@link model.Location}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocationAdapter() {
		if (locationItemProvider == null) {
			locationItemProvider = new LocationItemProvider(this);
		}

		return locationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.ApplicationCollaboration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationCollaborationItemProvider applicationCollaborationItemProvider;

	/**
	 * This creates an adapter for a {@link model.ApplicationCollaboration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationCollaborationAdapter() {
		if (applicationCollaborationItemProvider == null) {
			applicationCollaborationItemProvider = new ApplicationCollaborationItemProvider(this);
		}

		return applicationCollaborationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.ApplicationComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationComponentItemProvider applicationComponentItemProvider;

	/**
	 * This creates an adapter for a {@link model.ApplicationComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationComponentAdapter() {
		if (applicationComponentItemProvider == null) {
			applicationComponentItemProvider = new ApplicationComponentItemProvider(this);
		}

		return applicationComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.ApplicationFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationFunctionItemProvider applicationFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link model.ApplicationFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationFunctionAdapter() {
		if (applicationFunctionItemProvider == null) {
			applicationFunctionItemProvider = new ApplicationFunctionItemProvider(this);
		}

		return applicationFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.ApplicationInteraction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationInteractionItemProvider applicationInteractionItemProvider;

	/**
	 * This creates an adapter for a {@link model.ApplicationInteraction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationInteractionAdapter() {
		if (applicationInteractionItemProvider == null) {
			applicationInteractionItemProvider = new ApplicationInteractionItemProvider(this);
		}

		return applicationInteractionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.ApplicationInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationInterfaceItemProvider applicationInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link model.ApplicationInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationInterfaceAdapter() {
		if (applicationInterfaceItemProvider == null) {
			applicationInterfaceItemProvider = new ApplicationInterfaceItemProvider(this);
		}

		return applicationInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.DataObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataObjectItemProvider dataObjectItemProvider;

	/**
	 * This creates an adapter for a {@link model.DataObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataObjectAdapter() {
		if (dataObjectItemProvider == null) {
			dataObjectItemProvider = new DataObjectItemProvider(this);
		}

		return dataObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.ApplicationService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationServiceItemProvider applicationServiceItemProvider;

	/**
	 * This creates an adapter for a {@link model.ApplicationService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationServiceAdapter() {
		if (applicationServiceItemProvider == null) {
			applicationServiceItemProvider = new ApplicationServiceItemProvider(this);
		}

		return applicationServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Artifact} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArtifactItemProvider artifactItemProvider;

	/**
	 * This creates an adapter for a {@link model.Artifact}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArtifactAdapter() {
		if (artifactItemProvider == null) {
			artifactItemProvider = new ArtifactItemProvider(this);
		}

		return artifactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.CommunicationPath} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommunicationPathItemProvider communicationPathItemProvider;

	/**
	 * This creates an adapter for a {@link model.CommunicationPath}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommunicationPathAdapter() {
		if (communicationPathItemProvider == null) {
			communicationPathItemProvider = new CommunicationPathItemProvider(this);
		}

		return communicationPathItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Network} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkItemProvider networkItemProvider;

	/**
	 * This creates an adapter for a {@link model.Network}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkAdapter() {
		if (networkItemProvider == null) {
			networkItemProvider = new NetworkItemProvider(this);
		}

		return networkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.InfrastructureInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfrastructureInterfaceItemProvider infrastructureInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link model.InfrastructureInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfrastructureInterfaceAdapter() {
		if (infrastructureInterfaceItemProvider == null) {
			infrastructureInterfaceItemProvider = new InfrastructureInterfaceItemProvider(this);
		}

		return infrastructureInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.InfrastructureService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfrastructureServiceItemProvider infrastructureServiceItemProvider;

	/**
	 * This creates an adapter for a {@link model.InfrastructureService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfrastructureServiceAdapter() {
		if (infrastructureServiceItemProvider == null) {
			infrastructureServiceItemProvider = new InfrastructureServiceItemProvider(this);
		}

		return infrastructureServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.InfrastructureFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfrastructureFunctionItemProvider infrastructureFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link model.InfrastructureFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfrastructureFunctionAdapter() {
		if (infrastructureFunctionItemProvider == null) {
			infrastructureFunctionItemProvider = new InfrastructureFunctionItemProvider(this);
		}

		return infrastructureFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Node} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeItemProvider nodeItemProvider;

	/**
	 * This creates an adapter for a {@link model.Node}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeAdapter() {
		if (nodeItemProvider == null) {
			nodeItemProvider = new NodeItemProvider(this);
		}

		return nodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.SystemSoftware} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemSoftwareItemProvider systemSoftwareItemProvider;

	/**
	 * This creates an adapter for a {@link model.SystemSoftware}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemSoftwareAdapter() {
		if (systemSoftwareItemProvider == null) {
			systemSoftwareItemProvider = new SystemSoftwareItemProvider(this);
		}

		return systemSoftwareItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Device} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeviceItemProvider deviceItemProvider;

	/**
	 * This creates an adapter for a {@link model.Device}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeviceAdapter() {
		if (deviceItemProvider == null) {
			deviceItemProvider = new DeviceItemProvider(this);
		}

		return deviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Stakeholder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StakeholderItemProvider stakeholderItemProvider;

	/**
	 * This creates an adapter for a {@link model.Stakeholder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStakeholderAdapter() {
		if (stakeholderItemProvider == null) {
			stakeholderItemProvider = new StakeholderItemProvider(this);
		}

		return stakeholderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Driver} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DriverItemProvider driverItemProvider;

	/**
	 * This creates an adapter for a {@link model.Driver}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDriverAdapter() {
		if (driverItemProvider == null) {
			driverItemProvider = new DriverItemProvider(this);
		}

		return driverItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Assessment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssessmentItemProvider assessmentItemProvider;

	/**
	 * This creates an adapter for a {@link model.Assessment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssessmentAdapter() {
		if (assessmentItemProvider == null) {
			assessmentItemProvider = new AssessmentItemProvider(this);
		}

		return assessmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Goal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoalItemProvider goalItemProvider;

	/**
	 * This creates an adapter for a {@link model.Goal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoalAdapter() {
		if (goalItemProvider == null) {
			goalItemProvider = new GoalItemProvider(this);
		}

		return goalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Requirement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequirementItemProvider requirementItemProvider;

	/**
	 * This creates an adapter for a {@link model.Requirement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequirementAdapter() {
		if (requirementItemProvider == null) {
			requirementItemProvider = new RequirementItemProvider(this);
		}

		return requirementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Constraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintItemProvider constraintItemProvider;

	/**
	 * This creates an adapter for a {@link model.Constraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintAdapter() {
		if (constraintItemProvider == null) {
			constraintItemProvider = new ConstraintItemProvider(this);
		}

		return constraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Principle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrincipleItemProvider principleItemProvider;

	/**
	 * This creates an adapter for a {@link model.Principle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrincipleAdapter() {
		if (principleItemProvider == null) {
			principleItemProvider = new PrincipleItemProvider(this);
		}

		return principleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.WorkPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkPackageItemProvider workPackageItemProvider;

	/**
	 * This creates an adapter for a {@link model.WorkPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkPackageAdapter() {
		if (workPackageItemProvider == null) {
			workPackageItemProvider = new WorkPackageItemProvider(this);
		}

		return workPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Deliverable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeliverableItemProvider deliverableItemProvider;

	/**
	 * This creates an adapter for a {@link model.Deliverable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeliverableAdapter() {
		if (deliverableItemProvider == null) {
			deliverableItemProvider = new DeliverableItemProvider(this);
		}

		return deliverableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Plateau} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlateauItemProvider plateauItemProvider;

	/**
	 * This creates an adapter for a {@link model.Plateau}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlateauAdapter() {
		if (plateauItemProvider == null) {
			plateauItemProvider = new PlateauItemProvider(this);
		}

		return plateauItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Gap} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GapItemProvider gapItemProvider;

	/**
	 * This creates an adapter for a {@link model.Gap}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGapAdapter() {
		if (gapItemProvider == null) {
			gapItemProvider = new GapItemProvider(this);
		}

		return gapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.AccessRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccessRelationshipItemProvider accessRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link model.AccessRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccessRelationshipAdapter() {
		if (accessRelationshipItemProvider == null) {
			accessRelationshipItemProvider = new AccessRelationshipItemProvider(this);
		}

		return accessRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.AggregationRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AggregationRelationshipItemProvider aggregationRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link model.AggregationRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAggregationRelationshipAdapter() {
		if (aggregationRelationshipItemProvider == null) {
			aggregationRelationshipItemProvider = new AggregationRelationshipItemProvider(this);
		}

		return aggregationRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.AssignmentRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssignmentRelationshipItemProvider assignmentRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link model.AssignmentRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssignmentRelationshipAdapter() {
		if (assignmentRelationshipItemProvider == null) {
			assignmentRelationshipItemProvider = new AssignmentRelationshipItemProvider(this);
		}

		return assignmentRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.AssociationRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssociationRelationshipItemProvider associationRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link model.AssociationRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssociationRelationshipAdapter() {
		if (associationRelationshipItemProvider == null) {
			associationRelationshipItemProvider = new AssociationRelationshipItemProvider(this);
		}

		return associationRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.CompositionRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositionRelationshipItemProvider compositionRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link model.CompositionRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositionRelationshipAdapter() {
		if (compositionRelationshipItemProvider == null) {
			compositionRelationshipItemProvider = new CompositionRelationshipItemProvider(this);
		}

		return compositionRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.FlowRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowRelationshipItemProvider flowRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link model.FlowRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowRelationshipAdapter() {
		if (flowRelationshipItemProvider == null) {
			flowRelationshipItemProvider = new FlowRelationshipItemProvider(this);
		}

		return flowRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.RealisationRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RealisationRelationshipItemProvider realisationRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link model.RealisationRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRealisationRelationshipAdapter() {
		if (realisationRelationshipItemProvider == null) {
			realisationRelationshipItemProvider = new RealisationRelationshipItemProvider(this);
		}

		return realisationRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.SpecialisationRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpecialisationRelationshipItemProvider specialisationRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link model.SpecialisationRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpecialisationRelationshipAdapter() {
		if (specialisationRelationshipItemProvider == null) {
			specialisationRelationshipItemProvider = new SpecialisationRelationshipItemProvider(this);
		}

		return specialisationRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.TriggeringRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriggeringRelationshipItemProvider triggeringRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link model.TriggeringRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriggeringRelationshipAdapter() {
		if (triggeringRelationshipItemProvider == null) {
			triggeringRelationshipItemProvider = new TriggeringRelationshipItemProvider(this);
		}

		return triggeringRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.UsedByRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UsedByRelationshipItemProvider usedByRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link model.UsedByRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUsedByRelationshipAdapter() {
		if (usedByRelationshipItemProvider == null) {
			usedByRelationshipItemProvider = new UsedByRelationshipItemProvider(this);
		}

		return usedByRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.InfluenceRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfluenceRelationshipItemProvider influenceRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link model.InfluenceRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfluenceRelationshipAdapter() {
		if (influenceRelationshipItemProvider == null) {
			influenceRelationshipItemProvider = new InfluenceRelationshipItemProvider(this);
		}

		return influenceRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.DiagramModelReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiagramModelReferenceItemProvider diagramModelReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link model.DiagramModelReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiagramModelReferenceAdapter() {
		if (diagramModelReferenceItemProvider == null) {
			diagramModelReferenceItemProvider = new DiagramModelReferenceItemProvider(this);
		}

		return diagramModelReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.DiagramModelGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiagramModelGroupItemProvider diagramModelGroupItemProvider;

	/**
	 * This creates an adapter for a {@link model.DiagramModelGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiagramModelGroupAdapter() {
		if (diagramModelGroupItemProvider == null) {
			diagramModelGroupItemProvider = new DiagramModelGroupItemProvider(this);
		}

		return diagramModelGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.DiagramModelNote} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiagramModelNoteItemProvider diagramModelNoteItemProvider;

	/**
	 * This creates an adapter for a {@link model.DiagramModelNote}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiagramModelNoteAdapter() {
		if (diagramModelNoteItemProvider == null) {
			diagramModelNoteItemProvider = new DiagramModelNoteItemProvider(this);
		}

		return diagramModelNoteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.DiagramModelImage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiagramModelImageItemProvider diagramModelImageItemProvider;

	/**
	 * This creates an adapter for a {@link model.DiagramModelImage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiagramModelImageAdapter() {
		if (diagramModelImageItemProvider == null) {
			diagramModelImageItemProvider = new DiagramModelImageItemProvider(this);
		}

		return diagramModelImageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.DiagramModelConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiagramModelConnectionItemProvider diagramModelConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link model.DiagramModelConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiagramModelConnectionAdapter() {
		if (diagramModelConnectionItemProvider == null) {
			diagramModelConnectionItemProvider = new DiagramModelConnectionItemProvider(this);
		}

		return diagramModelConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.DiagramModelBendpoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiagramModelBendpointItemProvider diagramModelBendpointItemProvider;

	/**
	 * This creates an adapter for a {@link model.DiagramModelBendpoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiagramModelBendpointAdapter() {
		if (diagramModelBendpointItemProvider == null) {
			diagramModelBendpointItemProvider = new DiagramModelBendpointItemProvider(this);
		}

		return diagramModelBendpointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Bounds} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoundsItemProvider boundsItemProvider;

	/**
	 * This creates an adapter for a {@link model.Bounds}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoundsAdapter() {
		if (boundsItemProvider == null) {
			boundsItemProvider = new BoundsItemProvider(this);
		}

		return boundsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.ArchimateDiagramModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArchimateDiagramModelItemProvider archimateDiagramModelItemProvider;

	/**
	 * This creates an adapter for a {@link model.ArchimateDiagramModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArchimateDiagramModelAdapter() {
		if (archimateDiagramModelItemProvider == null) {
			archimateDiagramModelItemProvider = new ArchimateDiagramModelItemProvider(this);
		}

		return archimateDiagramModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.DiagramModelArchimateObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiagramModelArchimateObjectItemProvider diagramModelArchimateObjectItemProvider;

	/**
	 * This creates an adapter for a {@link model.DiagramModelArchimateObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiagramModelArchimateObjectAdapter() {
		if (diagramModelArchimateObjectItemProvider == null) {
			diagramModelArchimateObjectItemProvider = new DiagramModelArchimateObjectItemProvider(this);
		}

		return diagramModelArchimateObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.DiagramModelArchimateConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiagramModelArchimateConnectionItemProvider diagramModelArchimateConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link model.DiagramModelArchimateConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiagramModelArchimateConnectionAdapter() {
		if (diagramModelArchimateConnectionItemProvider == null) {
			diagramModelArchimateConnectionItemProvider = new DiagramModelArchimateConnectionItemProvider(this);
		}

		return diagramModelArchimateConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.SketchModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SketchModelItemProvider sketchModelItemProvider;

	/**
	 * This creates an adapter for a {@link model.SketchModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSketchModelAdapter() {
		if (sketchModelItemProvider == null) {
			sketchModelItemProvider = new SketchModelItemProvider(this);
		}

		return sketchModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.SketchModelSticky} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SketchModelStickyItemProvider sketchModelStickyItemProvider;

	/**
	 * This creates an adapter for a {@link model.SketchModelSticky}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSketchModelStickyAdapter() {
		if (sketchModelStickyItemProvider == null) {
			sketchModelStickyItemProvider = new SketchModelStickyItemProvider(this);
		}

		return sketchModelStickyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.SketchModelActor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SketchModelActorItemProvider sketchModelActorItemProvider;

	/**
	 * This creates an adapter for a {@link model.SketchModelActor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSketchModelActorAdapter() {
		if (sketchModelActorItemProvider == null) {
			sketchModelActorItemProvider = new SketchModelActorItemProvider(this);
		}

		return sketchModelActorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (metadataItemProvider != null) metadataItemProvider.dispose();
		if (archimateModelItemProvider != null) archimateModelItemProvider.dispose();
		if (folderItemProvider != null) folderItemProvider.dispose();
		if (junctionItemProvider != null) junctionItemProvider.dispose();
		if (andJunctionItemProvider != null) andJunctionItemProvider.dispose();
		if (orJunctionItemProvider != null) orJunctionItemProvider.dispose();
		if (businessActivityItemProvider != null) businessActivityItemProvider.dispose();
		if (businessActorItemProvider != null) businessActorItemProvider.dispose();
		if (businessCollaborationItemProvider != null) businessCollaborationItemProvider.dispose();
		if (contractItemProvider != null) contractItemProvider.dispose();
		if (businessEventItemProvider != null) businessEventItemProvider.dispose();
		if (businessFunctionItemProvider != null) businessFunctionItemProvider.dispose();
		if (businessInteractionItemProvider != null) businessInteractionItemProvider.dispose();
		if (businessInterfaceItemProvider != null) businessInterfaceItemProvider.dispose();
		if (meaningItemProvider != null) meaningItemProvider.dispose();
		if (businessObjectItemProvider != null) businessObjectItemProvider.dispose();
		if (businessProcessItemProvider != null) businessProcessItemProvider.dispose();
		if (productItemProvider != null) productItemProvider.dispose();
		if (representationItemProvider != null) representationItemProvider.dispose();
		if (businessRoleItemProvider != null) businessRoleItemProvider.dispose();
		if (businessServiceItemProvider != null) businessServiceItemProvider.dispose();
		if (valueItemProvider != null) valueItemProvider.dispose();
		if (locationItemProvider != null) locationItemProvider.dispose();
		if (applicationCollaborationItemProvider != null) applicationCollaborationItemProvider.dispose();
		if (applicationComponentItemProvider != null) applicationComponentItemProvider.dispose();
		if (applicationFunctionItemProvider != null) applicationFunctionItemProvider.dispose();
		if (applicationInteractionItemProvider != null) applicationInteractionItemProvider.dispose();
		if (applicationInterfaceItemProvider != null) applicationInterfaceItemProvider.dispose();
		if (dataObjectItemProvider != null) dataObjectItemProvider.dispose();
		if (applicationServiceItemProvider != null) applicationServiceItemProvider.dispose();
		if (artifactItemProvider != null) artifactItemProvider.dispose();
		if (communicationPathItemProvider != null) communicationPathItemProvider.dispose();
		if (networkItemProvider != null) networkItemProvider.dispose();
		if (infrastructureInterfaceItemProvider != null) infrastructureInterfaceItemProvider.dispose();
		if (infrastructureServiceItemProvider != null) infrastructureServiceItemProvider.dispose();
		if (infrastructureFunctionItemProvider != null) infrastructureFunctionItemProvider.dispose();
		if (nodeItemProvider != null) nodeItemProvider.dispose();
		if (systemSoftwareItemProvider != null) systemSoftwareItemProvider.dispose();
		if (deviceItemProvider != null) deviceItemProvider.dispose();
		if (stakeholderItemProvider != null) stakeholderItemProvider.dispose();
		if (driverItemProvider != null) driverItemProvider.dispose();
		if (assessmentItemProvider != null) assessmentItemProvider.dispose();
		if (goalItemProvider != null) goalItemProvider.dispose();
		if (requirementItemProvider != null) requirementItemProvider.dispose();
		if (constraintItemProvider != null) constraintItemProvider.dispose();
		if (principleItemProvider != null) principleItemProvider.dispose();
		if (workPackageItemProvider != null) workPackageItemProvider.dispose();
		if (deliverableItemProvider != null) deliverableItemProvider.dispose();
		if (plateauItemProvider != null) plateauItemProvider.dispose();
		if (gapItemProvider != null) gapItemProvider.dispose();
		if (accessRelationshipItemProvider != null) accessRelationshipItemProvider.dispose();
		if (aggregationRelationshipItemProvider != null) aggregationRelationshipItemProvider.dispose();
		if (assignmentRelationshipItemProvider != null) assignmentRelationshipItemProvider.dispose();
		if (associationRelationshipItemProvider != null) associationRelationshipItemProvider.dispose();
		if (compositionRelationshipItemProvider != null) compositionRelationshipItemProvider.dispose();
		if (flowRelationshipItemProvider != null) flowRelationshipItemProvider.dispose();
		if (realisationRelationshipItemProvider != null) realisationRelationshipItemProvider.dispose();
		if (specialisationRelationshipItemProvider != null) specialisationRelationshipItemProvider.dispose();
		if (triggeringRelationshipItemProvider != null) triggeringRelationshipItemProvider.dispose();
		if (usedByRelationshipItemProvider != null) usedByRelationshipItemProvider.dispose();
		if (influenceRelationshipItemProvider != null) influenceRelationshipItemProvider.dispose();
		if (diagramModelReferenceItemProvider != null) diagramModelReferenceItemProvider.dispose();
		if (diagramModelGroupItemProvider != null) diagramModelGroupItemProvider.dispose();
		if (diagramModelNoteItemProvider != null) diagramModelNoteItemProvider.dispose();
		if (diagramModelImageItemProvider != null) diagramModelImageItemProvider.dispose();
		if (diagramModelConnectionItemProvider != null) diagramModelConnectionItemProvider.dispose();
		if (diagramModelBendpointItemProvider != null) diagramModelBendpointItemProvider.dispose();
		if (boundsItemProvider != null) boundsItemProvider.dispose();
		if (archimateDiagramModelItemProvider != null) archimateDiagramModelItemProvider.dispose();
		if (diagramModelArchimateObjectItemProvider != null) diagramModelArchimateObjectItemProvider.dispose();
		if (diagramModelArchimateConnectionItemProvider != null) diagramModelArchimateConnectionItemProvider.dispose();
		if (sketchModelItemProvider != null) sketchModelItemProvider.dispose();
		if (sketchModelStickyItemProvider != null) sketchModelStickyItemProvider.dispose();
		if (sketchModelActorItemProvider != null) sketchModelActorItemProvider.dispose();
	}

}
